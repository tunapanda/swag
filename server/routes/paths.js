const Router = require('koa-router');
const LearningPath = require('../models/learning_path');
const { validatePaths } = require('../middleware/validationPost/validatePostData');
const permController = require('../middleware/permController');

const slugGen = require('../utils/slugGen');

const router = new Router({
  prefix: '/paths'
});

/**
 *
 * @param {json} parent
 *
 * modify the parent object
 * return child relation object
 *
 */
async function returnType(parent) {
  try {
    if (parent.length == undefined) {
      parent.courses.forEach(lesson => {
        return lesson.type = 'courses';
      });
    } else {
      parent.forEach(mod => {
        mod.courses.forEach(lesson => {
          return lesson.type = 'courses';
        });
      });
    }
  } catch (error) {
    null;
  }
}

/**
 * @api {get} /courses/ GET all learning paths.
 * @apiName GetPaths
 * @apiGroup Learning Path
 * @apiPermission none
 *
 * @apiSampleRequest off
 *
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *        "learningpath": [
 *            {
 *                "id": "learning_path1",
 *                "name": "A Learning Path",
 *                "slug": "a-learning-path",
 *                "description": "contains related courses.",
 *                "status": "published",
 *                "creatorId": "user1",
 *                "createdAt": "2017-12-20T16:17:10.000Z",
 *                "updatedAt": "2017-12-20T16:17:10.000Z",
 *                "courses": [
 *                    {
 *                        "id": "course1",
 *                        "name": "A Course 1",
 *                        "type": "courses"
 *                    }
 *                ]
 *            },
 *            {
 *                "id": "learning_path2",
 *                "name": "A Learning Path 2",
 *                "slug": "a-learning-path-2",
 *                "description": "Contains related courses.",
 *                "status": "published",
 *                "creatorId": "user2",
 *                "createdAt": "2017-12-20T16:17:10.000Z",
 *                "updatedAt": "2017-12-20T16:17:10.000Z",
 *                "courses": []
 *            }
 *          ]
 *      }
 *
 * @apiError {String} errors Bad Request.
 *
 */

router.get('/', permController.requireAuth, async ctx => {
  try {
    const learningpath = await LearningPath.query().where(ctx.query).eager('courses(selectNameAndId)');

    returnType(learningpath);

    ctx.status = 200;
    ctx.body = { learningpath };

  } catch (error) {
    ctx.status = 400;
    ctx.body = { message: 'The query key does not exist' };
  }
});

/**
 * @api {get} /paths/:id GET single learning path.
 * @apiName GetAPath
 * @apiGroup Learning Path
 * @apiPermission none
 * @apiVersion 0.4.0
 *
 * @apiSampleRequest off
 *
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *        "learningpath": {
 *            "id": "learning_path1",
 *            "name": "A Learning Path",
 *            "slug": "a-learning-path",
 *            "description": "For the organization of courses.",
 *            "status": "published",
 *            "creatorId": "user1",
 *            "createdAt": "2017-12-20T16:17:10.000Z",
 *            "updatedAt": "2017-12-20T16:17:10.000Z",
 *            "courses": [
 *                {
 *                    "id": "course1",
 *                    "name": "A Course 1",
 *                    "type": "courses"
 *                },
 *                {
 *                    "id": "diglit",
 *                    "name": "Digital Literacy",
 *                    "type": "courses"
 *                }
 *            ]
 *        }
 *      }
 *
 * @apiError {String} errors Bad Request.
 *
 */

router.get('/:id', permController.requireAuth, async ctx => {
  const learningpath = await LearningPath.query().findById(ctx.params.id).eager('courses(selectNameAndId)');
  ctx.assert(learningpath, 404, 'No matching record found');

  returnType(learningpath);

  ctx.status = 200;
  ctx.body = { learningpath };
});

/**
 * @api {post} /paths POST learning path.
 * @apiName PostAPath
 * @apiGroup Courses
 * @apiPermission none
 *
 * @apiParam (Post Params) {String} learningPath[name] Name - Unique.
 * @apiParam (Post Params) {String} learningPath[slug] Slug - Unique and autogenerated.
 * @apiParam (Post Params) {String} learningPath[description] Description.
 * @apiParam (Post Params) {String} learningPath[status] LEarning Path status - published | draft .
 * @apiParam (Post Params) {String} learningPath[creatorId] Id of the User.

 *
 * @apiSampleRequest off
 *
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 201 OK
 *     {
 *      "learningPath": {
 *        "name": "A Learning Path",
 *        "slug": "a-learning-path",
 *        "description": "Contains related courses.",
 *        "status": "published",
 *        "creatorId": "user1",
 *      }
 *    }
 *
 * @apiError {String} errors Bad Request.
 *
 */

router.post('/', permController.requireAuth, permController.grantAccess('createAny', 'path'), validatePaths, async ctx => {
  const newLearningPath = ctx.request.body.learningPath;
  newLearningPath.slug = await slugGen(newLearningPath.name);

  let learningpath;
  try {
    learningpath = await LearningPath.query().insertAndFetch(newLearningPath);
  } catch (e) {
    if (e.statusCode) {
      ctx.throw(e.statusCode, null, { errors: [e.message] });
    } else { ctx.throw(400, null, { errors: ['Bad Request'] }); }
    throw e;
  }

  ctx.assert(learningpath, 401, 'Something went wrong');

  ctx.status = 201;
  ctx.body = { learningpath };
});


/**
 * @api {put} /paths/:id PUT a learning path.
 * @apiName PutAPath
 * @apiGroup Learning Path
 * @apiPermission [admin, teacher, superadmin]
 *
 * @apiParam (Put Params) {String} learningPath[name] Optional Name Unique.
 * @apiParam (Put Params) {String} learningPath[slug] Optional Slug is Unique and autogenerated.
 * @apiParam (Put Params) {String} learningPath[description] Optional Description.
 * @apiParam (Put Params) {String} learningPath[status] Learning Path status[published or draft]
 *
 * @apiSampleRequest off
 *
 * @apiSuccess {String} course[object] Object data
 * @apiError {String} errors Bad Request.
 *
 */

router.put('/:id', permController.requireAuth, permController.grantAccess('updateOwn', 'path'), async ctx => {
  const learningpath_record = await LearningPath.query().findById(ctx.params.id);

  if (!learningpath_record) {
    ctx.throw(400, 'That learning path does not exist');
  }

  const newLearningPath = ctx.request.body.learningPath;

  let learningpath;
  try {
    learningpath = await LearningPath.query().patchAndFetchById(ctx.params.id, newLearningPath);
  } catch (e) {
    if (e.statusCode) {
      ctx.throw(e.statusCode, null, { errors: [e.message] });
    } else { ctx.throw(400, null, { errors: ['Bad Request'] }); }
    throw e;
  }

  ctx.assert(learningpath, 400, 'That learning path does not exist');

  ctx.status = 201;
  ctx.body = { learningpath };
});
/**
 * @api {delete} /paths/:id DELETE learning path
 * @apiName DeleteLearningPath
 * @apiGroup Learning Path
 *
 * @apiSuccess {String} learningpath[object] Object data
 * @apiError {String} errors Bad Request
 *
 */
router.delete('/:id', permController.requireAuth, permController.grantAccess('deleteAny', 'path'), async ctx => {
  const learningpath = await LearningPath.query().findById(ctx.params.id);
  if (!learningpath) {
    ctx.assert(learningpath, 401, 'No ID was found');
  }
  await LearningPath.query().delete().where({ id: ctx.params.id });

  ctx.status = 200;
  ctx.body = { learningpath };
});

module.exports = router.routes();
