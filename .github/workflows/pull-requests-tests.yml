name: End to End Testing on Push

on: push

jobs:
  build:
    name: Build and Install Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.x']

    steps:
      - uses: actions/checkout@v2

      # Initialize Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

       # Yarn cache dir
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install project dependencies
      - name: Installing Wikonnect root dependencies
        run: yarn  --frozen-lockfile

      # Install project dependencies
      - name: Install frontend dependencies
        run:  yarn --cwd ./frontend  --frozen-lockfile


      # Install project dependencies, test and build
      - name: Install backend dependencies
        run: yarn --cwd ./server --frozen-lockfile

      - name: Lint server
        run: yarn --cwd ./server lint:js

      - name: Linting frontend HBS
        run: yarn --cwd ./frontend lint:hbs

      - name: Linting frontend JS
        run: yarn --cwd ./server lint:js
  test:
    name: Server-side Tests
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Backend install dependencies
      - name: Backend install dependencies
        run: yarn --frozen-lockfile --cwd ./server

      # Backend migrate database nad seed
      - name: Backend database set-up
        run: cd server;$(yarn bin)/knex migrate:latest; $(yarn bin)/knex seed:run; cd ../
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          NODE_ENV: action

      # Install project dependencies, test and build
      - name: Backend testing
        run: yarn --cwd ./server test:local
        env:
          NODE_ENV: action
          REDIS_HOST: localhost
          # The default Redis port
          REDIS_PORT: 6379
  cypress-run:
    name: E2E on Chrome
    runs-on: ubuntu-16.04
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Install YARN dependencies, cache them correctly
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # Install project dependencies, test and build
      - name: Install dependencies
        run: yarn  --frozen-lockfile

      # Install project dependencies, test and build
      - name: Install dependencies
        run:  yarn --cwd ./frontend  --frozen-lockfile

      - name: Running build
        run:  yarn --cwd ./frontend build

      # Install project dependencies, test and build
      - name: Install dependencies
        run: yarn --cwd ./server --frozen-lockfile

      # Run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v2
        env:
          NODE_ENV: action
          REDIS_HOST: localhost
          # The default Redis port
          REDIS_PORT: 6379
        with:
          start: yarn --cwd ./server start, yarn --cwd ./frontend start:local
          config: pageLoadTimeout=100000,baseUrl=http://localhost:4200
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots