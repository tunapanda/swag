name: CD
on:
  push:
    branches:
      - staging
jobs:
  buildAndTest:
    name: CI Pipeline
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.x']

    steps:
      - uses: actions/checkout@v2

      # cache node_modules in our monorepo project instead of caching the yarn cache
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      # Initialize Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Wikonnect root install dependencies
      - name: Wikonnect root install dependencies
        run: yarn --frozen-lockfile

      # Frontend install dependencies
      - name: Frontend install dependencies
        run: yarn --frozen-lockfile --cwd ./frontend

      # Frontend run build
      - name: Frontend run build
        run: yarn --cwd ./frontend build --prod

      # Frontend lint Ember JS
      - name: Frontend lint Ember JS
        run: yarn --cwd ./frontend lint:js

  test:
    name: Server-side Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['12.x']

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    needs: buildAndTest
    steps:
      - uses: actions/checkout@v2

      # Backend install dependencies
      - name: Backend install dependencies
        run: yarn --frozen-lockfile --cwd ./server

      # Backend migrate database nad seed
      - name: Backend database set-up
        run: cd server;$(yarn bin)/knex migrate:latest; $(yarn bin)/knex seed:run; cd ../
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          NODE_ENV: action

      # Install project dependencies, test and build
      - name: Backend testing
        run: yarn --cwd ./server test:local
        env:
          NODE_ENV: action
          REDIS_HOST: localhost
          # The default Redis port
          REDIS_PORT: 6379
  deploy:
    name: CD Pipeline
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
        node-version: ['12.x']
        appname: ['aws-codedeploy']
        deploy-group: ['wikonnect-staging']
        s3-bucket: ['wikonnect-codedeploy-deployments']
        s3-filename: ['staging-wikonnect-codedeploy-${{ github.sha }}']

    needs: test
    steps:
      - uses: actions/checkout@v2

      # Initialize Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Install project dependencies and build
      - name: Install dependencies
        run: yarn --frozen-lockfile

      # Install project dependencies, test and build
      - name: Install dependencies
        run: yarn --frozen-lockfile --cwd ./frontend
      - name: Run build
        run: yarn --frozen-lockfile --cwd ./frontend build --prod

      # Install project dependencies, test and build
      - name: Install dependencies
        run: yarn --frozen-lockfile --cwd ./server

      # Install AWS CLI 2
      - name: Install AWS CLI 2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Deploy push to AWS S3
      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{ matrix.appname }} \
          --description "This is a revision for the ${{ matrix.appname }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{ matrix.s3-bucket }}/${{ matrix.s3-filename }}.zip \
          --source .
      # Create deployment to CodeDeploy
      - name: AWS Create Deployment
        run: |
          aws deploy create-deployment \
           --application-name ${{ matrix.appname }} \
           --deployment-config-name CodeDeployDefault.OneAtATime \
           --deployment-group-name ${{ matrix.deploy-group }} \
           --file-exists-behavior OVERWRITE \
           --s3-location bucket=${{ matrix.s3-bucket }},key=${{ matrix.s3-filename }}.zip,bundleType=zip \